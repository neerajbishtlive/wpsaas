#!/bin/bash

# WordPress Installation Script for SaaS Platform
# Usage: ./install-wordpress.sh <site_directory> <db_name> <db_user> <db_pass> <site_url> <site_title> <admin_user> <admin_pass> <admin_email> <template>

set -e

# Arguments
SITE_DIR=$1
DB_NAME=$2
DB_USER=$3
DB_PASS=$4
SITE_URL=$5
SITE_TITLE=$6
ADMIN_USER=$7
ADMIN_PASS=$8
ADMIN_EMAIL=$9
TEMPLATE=${10}

# Debug: Show what we received
echo "Debug - Admin Email received: '$ADMIN_EMAIL'"

# Paths - Get from environment or use relative paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
WP_CORE_PATH="${WP_CORE_PATH:-$PROJECT_ROOT/wordpress-core}"
SITES_PATH="${SITES_PATH:-$PROJECT_ROOT/sites}"
FULL_SITE_PATH="$SITES_PATH/$SITE_DIR"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

echo "Installing WordPress site: $SITE_TITLE"

# Create site directory
mkdir -p "$FULL_SITE_PATH"

# Create symlinks for WordPress core files (save disk space)
echo "Creating WordPress file structure..."
ln -s "$WP_CORE_PATH/wp-admin" "$FULL_SITE_PATH/wp-admin"
ln -s "$WP_CORE_PATH/wp-includes" "$FULL_SITE_PATH/wp-includes"

# Copy necessary files (these need to be writable)
cp "$WP_CORE_PATH/index.php" "$FULL_SITE_PATH/"
cp "$WP_CORE_PATH/wp-load.php" "$FULL_SITE_PATH/"
cp "$WP_CORE_PATH/wp-login.php" "$FULL_SITE_PATH/"
cp "$WP_CORE_PATH/wp-config-sample.php" "$FULL_SITE_PATH/wp-config.php"
cp -r "$WP_CORE_PATH/wp-content" "$FULL_SITE_PATH/"

# Create uploads directory
mkdir -p "$FULL_SITE_PATH/wp-content/uploads"
chmod 755 "$FULL_SITE_PATH/wp-content/uploads"

# Generate salts
AUTH_KEY=$(openssl rand -base64 32)
SECURE_AUTH_KEY=$(openssl rand -base64 32)
LOGGED_IN_KEY=$(openssl rand -base64 32)
NONCE_KEY=$(openssl rand -base64 32)
AUTH_SALT=$(openssl rand -base64 32)
SECURE_AUTH_SALT=$(openssl rand -base64 32)
LOGGED_IN_SALT=$(openssl rand -base64 32)
NONCE_SALT=$(openssl rand -base64 32)

# Create wp-config.php
cat > "$FULL_SITE_PATH/wp-config.php" << EOF
<?php
/**
 * WordPress Configuration - Generated by SaaS Platform
 */

// Database settings
define( 'DB_NAME', '$DB_NAME' );
define( 'DB_USER', '$DB_USER' );
define( 'DB_PASSWORD', '$DB_PASS' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8mb4' );
define( 'DB_COLLATE', '' );

// Authentication keys
define( 'AUTH_KEY',         '$AUTH_KEY' );
define( 'SECURE_AUTH_KEY',  '$SECURE_AUTH_KEY' );
define( 'LOGGED_IN_KEY',    '$LOGGED_IN_KEY' );
define( 'NONCE_KEY',        '$NONCE_KEY' );
define( 'AUTH_SALT',        '$AUTH_SALT' );
define( 'SECURE_AUTH_SALT', '$SECURE_AUTH_SALT' );
define( 'LOGGED_IN_SALT',   '$LOGGED_IN_SALT' );
define( 'NONCE_SALT',       '$NONCE_SALT' );

// Table prefix
\$table_prefix = 'wp_';

// Site URL
define( 'WP_HOME', 'https://$SITE_URL' );
define( 'WP_SITEURL', 'https://$SITE_URL' );

// Security settings
define( 'DISALLOW_FILE_EDIT', true );
define( 'WP_AUTO_UPDATE_CORE', false );
define( 'AUTOMATIC_UPDATER_DISABLED', true );

// Performance settings
define( 'WP_CACHE', true );
define( 'WP_MEMORY_LIMIT', '256M' );
define( 'WP_MAX_MEMORY_LIMIT', '256M' );

// Disable cron (handled by system)
define( 'DISABLE_WP_CRON', true );

// Debug settings (disabled for production)
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'WP_DEBUG_DISPLAY', false );

// Absolute path to WordPress
if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

// Load WordPress
require_once ABSPATH . 'wp-settings.php';
EOF

# Set permissions
chmod 644 "$FULL_SITE_PATH/wp-config.php"

# Install WordPress using WP-CLI
echo "Running WordPress installation..."
cd "$FULL_SITE_PATH"

# Install WordPress (skip email for local environment)
wp core install \
    --url="https://$SITE_URL" \
    --title="$SITE_TITLE" \
    --admin_user="$ADMIN_USER" \
    --admin_password="$ADMIN_PASS" \
    --admin_email="$ADMIN_EMAIL" \
    --skip-email \
    --allow-root

# Install and activate template-specific plugins/themes
case $TEMPLATE in
    "blog")
        echo "Setting up blog template..."
        wp theme install astra --activate
        wp plugin install wordpress-seo classic-editor --activate
        wp option update blogdescription "Another amazing blog"
        ;;
    
    "business")
        echo "Setting up business template..."
        wp theme install neve --activate
        wp plugin install contact-form-7 wordpress-seo --activate
        wp option update blogdescription "Professional Business Website"
        ;;
    
    "portfolio")
        echo "Setting up portfolio template..."
        wp theme install oceanwp --activate
        wp plugin install portfolio-post-type contact-form-7 --activate
        wp option update blogdescription "Creative Portfolio"
        ;;
    
    "ecommerce")
        echo "Setting up ecommerce template..."
        wp theme install storefront --activate
        wp plugin install woocommerce wordpress-seo contact-form-7 --activate
        wp plugin activate woocommerce
        wp option update blogdescription "Online Store"
        ;;
    
    *)
        echo "Using default template..."
        wp theme install twentytwentyfour --activate
        ;;
esac

# Install common plugins for all templates
wp plugin install \
    wordfence \
    updraftplus \
    wp-optimize \
    --activate

# Security hardening
echo "Applying security settings..."

# Disable XML-RPC
echo "# Block XML-RPC
<Files xmlrpc.php>
    Require all denied
</Files>" > "$FULL_SITE_PATH/.htaccess"

# Protect wp-config
echo "
# Protect wp-config.php
<Files wp-config.php>
    Require all denied
</Files>" >> "$FULL_SITE_PATH/.htaccess"

# Disable directory browsing
echo "
# Disable directory browsing
Options -Indexes" >> "$FULL_SITE_PATH/.htaccess"

# Set proper permissions
find "$FULL_SITE_PATH" -type d -exec chmod 755 {} \;
find "$FULL_SITE_PATH" -type f -exec chmod 644 {} \;
chmod 600 "$FULL_SITE_PATH/wp-config.php"

# Create monitoring file
echo "{
    \"installed\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
    \"template\": \"$TEMPLATE\",
    \"wordpress_version\": \"$(wp core version)\",
    \"php_version\": \"$(php -v | head -n 1 | cut -d ' ' -f 2)\"
}" > "$FULL_SITE_PATH/.saas-meta.json"

echo -e "${GREEN}âœ“ WordPress installation completed successfully!${NC}"
echo "Site URL: https://$SITE_URL"
echo "Admin URL: https://$SITE_URL/wp-admin"
echo "Username: $ADMIN_USER"

# Clear opcache if available
if command -v cachetool &> /dev/null; then
    cachetool opcache:reset
fi

exit 0